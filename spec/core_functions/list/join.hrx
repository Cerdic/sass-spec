<===> bracketed/both/input.scss
a {b: join([c d], [e f])}

<===> bracketed/both/output.css
a {
  b: [c d e f];
}

<===>
================================================================================
<===> bracketed/first/input.scss
a {b: join([c d], e f)}

<===> bracketed/first/output.css
a {
  b: [c d e f];
}

<===>
================================================================================
<===> bracketed/second/input.scss
a {b: join(c d, [e f])}

<===> bracketed/second/output.css
a {
  b: c d e f;
}

<===>
================================================================================
<===> bracketed/true/input.scss
a {b: join(c, d, $bracketed: true)}

<===> bracketed/true/output.css
a {
  b: [c d];
}

<===>
================================================================================
<===> bracketed/false/input.scss
a {b: join([c], [d], $bracketed: false)}

<===> bracketed/false/output.css
a {
  b: c d;
}

<===>
================================================================================
<===> bracketed/and_separator/input.scss
a {b: join(c, d, $bracketed: true, $separator: comma)}

<===> bracketed/and_separator/output.css
a {
  b: [c, d];
}

<===>
================================================================================
<===> bracketed/positional/input.scss
a {b: join(c, d, comma, true)}

<===> bracketed/positional/output.css
a {
  b: [c, d];
}

<===>
================================================================================
<===> bracketed/truthy/input.scss
a {b: join(c, d, $bracketed: e)}

<===> bracketed/truthy/output.css
a {
  b: [c d];
}

<===>
================================================================================
<===> bracketed/falsey/input.scss
a {b: join([c], [d], $bracketed: null)}

<===> bracketed/falsey/output.css
a {
  b: c d;
}

<===>
================================================================================
<===> error/README.md
`join()` is unique in that it takes multiple optional arguments that can be
passed independently of one another. This may necessitate unusual
implementation, so we go out of our way to verify that it disallows unusual
invalid calls.

<===>
================================================================================
<===> error/named/input.scss
.join-named-error {
  error: join(foo, bar, $invalid: true); }

<===> error/named/error
Error: No argument named $invalid.
  ,
2 |   error: join(foo, bar, $invalid: true); }
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:10  root stylesheet

<===> error/named/error-libsass
Error: Function join has no parameter named $invalid
        on line 2:25 of input.scss
>>   error: join(foo, bar, $invalid: true); }

   ------------------------^

<===>
================================================================================
<===> error/positional/input.scss
.join-positional-error {
  error: join(foo, bar, comma, true, false); }

<===> error/positional/error
Error: Only 4 arguments allowed, but 5 were passed.
  ,
2 |   error: join(foo, bar, comma, true, false); }
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:10  root stylesheet

<===> error/positional/error-libsass
Error: wrong number of arguments (5 for 4) for `join'
        on line 2 of input.scss
  Use --trace for backtrace.

<===>
================================================================================
<===> error/positional_and_named/input.scss
.join-positional-and-named-error {
  error: join(foo, bar, comma, true, false, $invalid: true); }

<===> error/positional_and_named/error
Error: Only 4 arguments allowed, but 5 were passed.
  ,
2 |   error: join(foo, bar, comma, true, false, $invalid: true); }
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:10  root stylesheet

<===> error/positional_and_named/error-libsass
Error: wrong number of arguments (6 for 4) for `join'
        on line 2 of input.scss
  Use --trace for backtrace.
